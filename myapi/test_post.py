#!/usr/bin/env python
"""
Script para inser√ß√£o em massa de dados de assiduidade
Gera registos para setembro 2025 com padr√µes realistas
"""
import requests
import json
import random
from datetime import datetime, timedelta
from calendar import monthrange

# Configura√ß√£o da API
API_CONFIG = {
    "base_url": "https://flask-attendance-api-ymvx.onrender.com",  # API online
    "local_url": "http://127.0.0.1:5000",  # Para teste local
    "api_key": None,  # Ser√° solicitada ao utilizador
    "use_online": True  # True para usar API online, False para local
}

def get_headers():
    return {
        "X-API-KEY": get_api_key(),
        "Content-Type": "application/json"
    }

def get_base_url():
    return API_CONFIG["base_url"] if API_CONFIG["use_online"] else API_CONFIG["local_url"]

def get_api_key():
    """Solicita a API key ao utilizador"""
    if API_CONFIG["api_key"] is None:
        print("üîë AUTENTICA√á√ÉO NECESS√ÅRIA")
        print("-" * 30)
        print("Para usar a API de produ√ß√£o, √© necess√°ria uma chave de autentica√ß√£o.")
        print("Contacte o administrador para obter a chave correta.")
        print()
        
        while True:
            api_key = input("Digite a API key: ").strip()
            if api_key:
                API_CONFIG["api_key"] = api_key
                break
            else:
                print("‚ùå API key n√£o pode estar vazia. Tente novamente.")
    
    return API_CONFIG["api_key"]

def generate_time_with_variance(base_hour, base_minute, variance_minutes=15):
    """Gera hor√°rio com varia√ß√£o aleat√≥ria"""
    total_minutes = base_hour * 60 + base_minute
    variance = random.randint(-variance_minutes, variance_minutes)
    total_minutes += variance
    
    # Garantir que n√£o passa para o dia seguinte ou anterior
    total_minutes = max(0, min(total_minutes, 23 * 60 + 59))
    
    hour = total_minutes // 60
    minute = total_minutes % 60
    return f"{hour:02d}:{minute:02d}:00"

def is_weekend(date_obj):
    """Verifica se √© fim de semana (s√°bado=5, domingo=6)"""
    return date_obj.weekday() >= 5

def generate_employee_patterns():
    """Define padr√µes espec√≠ficos para cada colaborador"""
    return {
        "Ana": {
            "entry_base": (8, 0),      # 08:00
            "exit_base": (17, 0),      # 17:00
            "entry_variance": 10,       # ¬±10 minutos
            "exit_variance": 15,        # ¬±15 minutos
            "lunch_out": (12, 0),      # Sai para almo√ßo √†s 12:00
            "lunch_in": (13, 0),       # Volta √†s 13:00
            "lunch_frequency": 0.9,     # 90% das vezes sai para almo√ßo
            "location": "Escrit√≥rio Central"
        },
        "Bruno": {
            "entry_base": (8, 0),
            "exit_base": (17, 0), 
            "entry_variance": 8,
            "exit_variance": 12,
            "lunch_out": (12, 15),     # Sai √†s 12:15
            "lunch_in": (13, 0),
            "lunch_frequency": 0.85,
            "location": "Escrit√≥rio Central"
        },
        "Clara": {
            "entry_base": (8, 0),
            "exit_base": (17, 0),
            "entry_variance": 5,        # Muito pontual
            "exit_variance": 10,
            "lunch_out": (12, 0),
            "lunch_in": (13, 0),
            "lunch_frequency": 0.2,     # S√≥ sextas-feiras (20% das vezes)
            "location": "Escrit√≥rio Norte"
        },
        "David": {
            "entry_base": (8, 45),     # Habitualmente atrasado - chega √†s 08:45
            "exit_base": (17, 30),     # Compensa saindo mais tarde
            "entry_variance": 20,       # Muito vari√°vel (√†s vezes mais atrasado)
            "exit_variance": 25,
            "lunch_out": (12, 30),     # Almo√ßa mais tarde
            "lunch_in": (13, 15),      # Volta mais tarde
            "lunch_frequency": 0.95,    # Quase sempre sai para almo√ßo
            "location": "Escrit√≥rio Norte"
        }
    }

def generate_september_data():
    """Gera todos os registos para setembro de 2025"""
    employees = generate_employee_patterns()
    records = []
    
    # Setembro 2025: 1 a 30
    year = 2025
    month = 9
    days_in_month = monthrange(year, month)[1]
    
    for day in range(1, days_in_month + 1):
        date_obj = datetime(year, month, day)
        date_str = date_obj.strftime("%Y-%m-%d")
        
        # Pular fins de semana
        if is_weekend(date_obj):
            continue
        
        print(f"Gerando dados para {date_str}...")
        
        for emp_name, pattern in employees.items():
            # Hor√°rio de entrada
            entry_time = generate_time_with_variance(
                pattern["entry_base"][0], 
                pattern["entry_base"][1], 
                pattern["entry_variance"]
            )
            
            # Hor√°rio de sa√≠da
            exit_time = generate_time_with_variance(
                pattern["exit_base"][0], 
                pattern["exit_base"][1], 
                pattern["exit_variance"]
            )
            
            # Registo principal (entrada e sa√≠da do dia)
            main_record = {
                "name": emp_name,
                "date": date_str,
                "location": pattern["location"],
                "time_entry": entry_time,
                "time_exit": exit_time
            }
            records.append(main_record)
            
            # Registos de almo√ßo (se aplic√°vel)
            should_lunch = random.random() < pattern["lunch_frequency"]
            
            # Clara s√≥ sai √†s sextas
            if emp_name == "Clara" and date_obj.weekday() != 4:  # 4 = sexta-feira
                should_lunch = False
            elif emp_name == "Clara" and date_obj.weekday() == 4:
                should_lunch = True
            
            if should_lunch:
                lunch_out_time = generate_time_with_variance(
                    pattern["lunch_out"][0],
                    pattern["lunch_out"][1],
                    5  # Pouca varia√ß√£o no almo√ßo
                )
                
                lunch_in_time = generate_time_with_variance(
                    pattern["lunch_in"][0],
                    pattern["lunch_in"][1],
                    8
                )
                
                # Registo de sa√≠da para almo√ßo
                lunch_out_record = {
                    "name": emp_name,
                    "date": date_str,
                    "location": pattern["location"],
                    "time_entry": None,
                    "time_exit": lunch_out_time
                }
                records.append(lunch_out_record)
                
                # Registo de volta do almo√ßo
                lunch_in_record = {
                    "name": emp_name,
                    "date": date_str,
                    "location": pattern["location"],
                    "time_entry": lunch_in_time,
                    "time_exit": None
                }
                records.append(lunch_in_record)
    
    return records

def insert_records_batch(records, batch_size=10):
    """Insere registos em lotes para n√£o sobrecarregar a API"""
    base_url = get_base_url()
    headers = get_headers()
    
    total = len(records)
    success_count = 0
    error_count = 0
    
    print(f"\\nüìä Inserindo {total} registos em lotes de {batch_size}...")
    print(f"üåê URL: {base_url}")
    print(f"üîë API Key: {API_CONFIG['api_key'][:8]}{'*' * (len(API_CONFIG['api_key']) - 8)}")
    print("-" * 50)
    
    for i in range(0, total, batch_size):
        batch = records[i:i + batch_size]
        batch_num = (i // batch_size) + 1
        total_batches = (total + batch_size - 1) // batch_size
        
        print(f"\\nüì¶ Lote {batch_num}/{total_batches} ({len(batch)} registos)...")
        
        for j, record in enumerate(batch):
            try:
                response = requests.post(f"{base_url}/attendance", 
                                       json=record, 
                                       headers=headers,
                                       timeout=10)
                
                if response.status_code == 201:
                    success_count += 1
                    print(f"  ‚úÖ {record['name']} - {record['date']} - {record.get('time_entry', 'sa√≠da')} - OK")
                else:
                    error_count += 1
                    print(f"  ‚ùå {record['name']} - {record['date']} - Erro {response.status_code}: {response.text[:100]}")
                    
            except requests.exceptions.Timeout:
                error_count += 1
                print(f"  ‚è∞ {record['name']} - {record['date']} - Timeout")
            except requests.exceptions.ConnectionError:
                error_count += 1
                print(f"  üîå {record['name']} - {record['date']} - Erro de conex√£o")
            except Exception as e:
                error_count += 1
                print(f"  üí• {record['name']} - {record['date']} - Erro: {str(e)[:50]}...")
        
        # Pequena pausa entre lotes para n√£o sobrecarregar
        if i + batch_size < total:
            import time
            time.sleep(1)
    
    print("\\n" + "=" * 50)
    print(f"üìä RESUMO FINAL:")
    print(f"‚úÖ Sucessos: {success_count}")
    print(f"‚ùå Erros: {error_count}")
    print(f"üìà Taxa de sucesso: {(success_count/total)*100:.1f}%")
    print("=" * 50)

def verify_data():
    """Verifica os dados inseridos"""
    base_url = get_base_url()
    headers = get_headers()
    
    try:
        print("\\nüîç Verificando dados inseridos...")
        response = requests.get(f"{base_url}/attendance", headers=headers)
        
        if response.status_code == 200:
            data = response.json()
            print(f"üìä Total de registos: {len(data)}")
            
            # Agrupar por colaborador
            by_employee = {}
            for record in data:
                name = record["name"]
                if name not in by_employee:
                    by_employee[name] = []
                by_employee[name].append(record)
            
            print("\\nüë• Registos por colaborador:")
            for name, records in by_employee.items():
                print(f"  {name}: {len(records)} registos")
            
            # Mostrar alguns exemplos
            print("\\nüìã Exemplos de registos:")
            for i, record in enumerate(data[-5:], 1):  # √öltimos 5
                entry = record.get('time_entry', 'N/A')
                exit_time = record.get('time_exit', 'N/A')
                print(f"  {i}. {record['name']} - {record['date']} - Entrada: {entry} - Sa√≠da: {exit_time}")
                
        else:
            print(f"‚ùå Erro ao verificar dados: {response.status_code}")
    except Exception as e:
        print(f"‚ùå Erro na verifica√ß√£o: {e}")

def main():
    print("üè¢ GERADOR DE DADOS DE ASSIDUIDADE - SETEMBRO 2025")
    print("=" * 60)
    
    # Solicitar API key primeiro
    api_key = get_api_key()
    
    print()
    print("üë• Colaboradores: Ana, Bruno, Clara, David")
    print("üìÖ Per√≠odo: 1-30 Setembro 2025 (dias √∫teis)")
    print("‚è∞ Padr√µes:")
    print("  ‚Ä¢ Ana & Bruno: 8:00-17:00 (pontuais)")
    print("  ‚Ä¢ Clara: 8:00-17:00 (n√£o almo√ßa, exceto sextas)")
    print("  ‚Ä¢ David: 8:45-17:30 (atrasado, vari√°vel)")
    print("üçΩÔ∏è Almo√ßo: 12:00-13:00 (com varia√ß√µes)")
    print("=" * 60)
    
    confirm = input("\\nüöÄ Gerar e inserir dados? (s/N): ").strip().lower()
    if confirm not in ['s', 'sim', 'y', 'yes']:
        print("‚ùå Opera√ß√£o cancelada.")
        return
    
    # Gerar dados
    print("\\nüìä Gerando dados...")
    records = generate_september_data()
    print(f"‚úÖ {len(records)} registos gerados!")
    
    # Inserir dados
    insert_records_batch(records, batch_size=5)  # Lotes menores para API online
    
    # Verificar resultado
    verify_data()
    
    print("\\nüéâ Processo conclu√≠do!")
    print("üí° Use a API para consultar os dados:")
    print(f"   GET {get_base_url()}/attendance?name=David")
    print(f"   GET {get_base_url()}/attendance/history?name=Clara&limit=10")

if __name__ == "__main__":
    main()
